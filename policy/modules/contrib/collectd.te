policy_module(collectd, 1.0.1)

########################################
#
# Declarations
#

## <desc>
##	<p>
##	Determine whether collectd can connect
##	to the network using TCP.
##	</p>
## </desc>
gen_tunable(collectd_tcp_network_connect, false)

## <desc>
##     <p>
##     Determine whether collectd can read
##     /proc/sys/kernel/random/entropy_avail
##     (entropy module)
##     </p>
## </desc>
gen_tunable(collectd_entropy, true)

## <desc>
##     <p>
##     Determine whether collectd can connect
##     to hddtemp using TCP.
##     </p>
## </desc>
gen_tunable(collectd_hddtemp, true)

## <desc>
##     <p>
##     Determine whether collectd can read
##     /proc/cpu/*/msr (turbostat module)
##     </p>
## </desc>
gen_tunable(collectd_turbostat, true)

## <desc>
##     <p>
##     Determine whether collectd can connect
##     to nut using TCP (nut module)
##     </p>
## </desc>
gen_tunable(collectd_nut, true)

## <desc>
##     <p>
##     Determine whether collectd can read
##     /proc/id/* (process module)
##     </p>
## </desc>
gen_tunable(collectd_process, true)

## <desc>
##     <p>
##     Determine whether collectd can read
##     /run/utmp (users module)
##     </p>
## </desc>
gen_tunable(collectd_users, true)

type collectd_t;
type collectd_exec_t;
init_daemon_domain(collectd_t, collectd_exec_t)

type collectd_initrc_exec_t;
init_script_file(collectd_initrc_exec_t)

type collectd_var_lib_t;
files_type(collectd_var_lib_t)

type collectd_var_run_t;
files_pid_file(collectd_var_run_t)

apache_content_template(collectd)

########################################
#
# Local policy
#

allow collectd_t self:capability { ipc_lock sys_nice };
allow collectd_t self:process { getsched setsched signal };
allow collectd_t self:fifo_file rw_fifo_file_perms;
allow collectd_t self:packet_socket create_socket_perms;
allow collectd_t self:unix_stream_socket { accept listen };

manage_dirs_pattern(collectd_t, collectd_var_lib_t, collectd_var_lib_t)
manage_files_pattern(collectd_t, collectd_var_lib_t, collectd_var_lib_t)
files_var_lib_filetrans(collectd_t, collectd_var_lib_t, dir)

manage_files_pattern(collectd_t, collectd_var_run_t, collectd_var_run_t)
files_pid_filetrans(collectd_t, collectd_var_run_t, file)

domain_use_interactive_fds(collectd_t)

kernel_read_network_state(collectd_t)
kernel_read_net_sysctls(collectd_t)
kernel_read_system_state(collectd_t)

dev_read_rand(collectd_t)
dev_read_sysfs(collectd_t)
dev_read_urand(collectd_t)

files_getattr_all_dirs(collectd_t)
files_read_etc_files(collectd_t)
files_read_etc_runtime_files(collectd_t)
files_read_usr_files(collectd_t)

fs_getattr_all_fs(collectd_t)

# For collectdmon
can_exec(collectd_t, collectd_exec_t)

miscfiles_read_localization(collectd_t)

logging_send_syslog_msg(collectd_t)

sysnet_dns_name_resolve(collectd_t)

dev_dontaudit_getattr_all_chr_files(collectd_t)

tunable_policy(`collectd_tcp_network_connect',`
	corenet_sendrecv_all_client_packets(collectd_t)
	corenet_tcp_connect_all_ports(collectd_t)
	corenet_tcp_sendrecv_all_ports(collectd_t)
')

tunable_policy(`collectd_entropy',`
	kernel_read_kernel_sysctls(collectd_t)
')

tunable_policy(`collectd_hddtemp',`
	corenet_tcp_connect_hddtemp_port(collectd_t)
	corenet_tcp_sendrecv_hddtemp_port(collectd_t)
')

tunable_policy(`collectd_turbostat',`
	allow collectd_t self:capability { sys_rawio };
	dev_read_cpuid(collectd_t)
')

tunable_policy(`collectd_nut',`
	corenet_tcp_connect_ups_port(collectd_t)
	corenet_tcp_sendrecv_ups_port(collectd_t)
')

tunable_policy(`collectd_process',`
	allow collectd_t self:capability { dac_override };
	domain_read_all_domains_state(collectd_t)
')

tunable_policy(`collectd_users',`
	init_read_utmp(collectd_t)
')

optional_policy(`
	virt_read_config(collectd_t)
')

########################################
#
# Web local policy
#

optional_policy(`
	read_files_pattern(httpd_collectd_script_t, collectd_var_lib_t, collectd_var_lib_t)
	list_dirs_pattern(httpd_collectd_script_t, collectd_var_lib_t, collectd_var_lib_t)
	miscfiles_setattr_fonts_cache_dirs(httpd_collectd_script_t)
')
